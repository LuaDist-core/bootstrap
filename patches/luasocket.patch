diff --git a/CMakeLists.txt b/CMakeLists.txt
new file mode 100644
index 0000000..d4bbbae
--- /dev/null
+++ b/CMakeLists.txt
@@ -0,0 +1,339 @@
+# Generated Cmake file begin
+cmake_minimum_required(VERSION 3.1)
+
+project(LuaSocket C CXX)
+
+find_package(Lua REQUIRED)
+
+## INSTALL DEFAULTS (Relative to CMAKE_INSTALL_PREFIX)
+# Primary paths
+set(INSTALL_BIN bin CACHE PATH "Where to install binaries to.")
+set(INSTALL_LIB lib CACHE PATH "Where to install libraries to.")
+set(INSTALL_ETC etc CACHE PATH "Where to store configuration files")
+set(INSTALL_SHARE share CACHE PATH "Directory for shared data.")
+
+set(INSTALL_LMOD ${INSTALL_LIB}/lua/${LUA_VERSION_MAJOR}.${LUA_VERSION_MINOR} CACHE PATH "Directory to install Lua modules.")
+set(INSTALL_CMOD ${INSTALL_LIB}/lua/${LUA_VERSION_MAJOR}.${LUA_VERSION_MINOR} CACHE PATH "Directory to install Lua binary modules.")
+
+set(BUILD_COPY_DIRECTORIES "doc" "samples" "etc" "test")
+
+if (WIN32)
+    set(socket_SOURCES src/socket.lua)
+    set(socket.headers_SOURCES src/headers.lua)
+    set(ltn12_SOURCES src/ltn12.lua)
+    set(socket.tp_SOURCES src/tp.lua)
+    set(socket.ftp_SOURCES src/ftp.lua)
+    set(socket.http_SOURCES src/http.lua)
+    set(socket.core_SOURCES "src/luasocket.c" "src/timeout.c" "src/buffer.c" "src/io.c" "src/auxiliar.c" "src/options.c" "src/inet.c" "src/except.c" "src/select.c" "src/tcp.c" "src/udp.c" "src/wsocket.c")
+    set(mime.core_SOURCES "src/mime.c")
+    set(mime.core_DEFINES "LUA_COMPAT_APIINTCASTS" "LUASOCKET_DEBUG" "NDEBUG" "LUASOCKET_API=__declspec(dllexport)" "MIME_API=__declspec(dllexport)")
+    set(mime_SOURCES src/mime.lua)
+    set(socket.url_SOURCES src/url.lua)
+    set(socket.core_LIB_NAMES "ws2_32")
+    set(socket.smtp_SOURCES src/smtp.lua)
+    set(socket.core_DEFINES "LUA_COMPAT_APIINTCASTS" "LUASOCKET_DEBUG" "NDEBUG" "LUASOCKET_API=__declspec(dllexport)" "MIME_API=__declspec(dllexport)")
+endif()
+
+if (APPLE)
+    set(socket_SOURCES src/socket.lua)
+    set(socket.tp_SOURCES src/tp.lua)
+    set(socket.core_SOURCES "src/luasocket.c" "src/timeout.c" "src/buffer.c" "src/io.c" "src/auxiliar.c" "src/options.c" "src/inet.c" "src/except.c" "src/select.c" "src/tcp.c" "src/udp.c" "src/usocket.c")
+    set(mime.core_DEFINES "LUA_COMPAT_APIINTCASTS" "LUASOCKET_DEBUG" "UNIX_HAS_SUN_LEN" "LUASOCKET_API=__attribute__((visibility(\"default\")))" "UNIX_API=__attribute__((visibility(\"default\")))" "MIME_API=__attribute__((visibility(\"default\")))")
+    set(mime_SOURCES src/mime.lua)
+    set(socket.unix_DEFINES "LUA_COMPAT_APIINTCASTS" "LUASOCKET_DEBUG" "UNIX_HAS_SUN_LEN" "LUASOCKET_API=__attribute__((visibility(\"default\")))" "UNIX_API=__attribute__((visibility(\"default\")))" "MIME_API=__attribute__((visibility(\"default\")))")
+    set(socket.core_DEFINES "LUA_COMPAT_APIINTCASTS" "LUASOCKET_DEBUG" "UNIX_HAS_SUN_LEN" "LUASOCKET_API=__attribute__((visibility(\"default\")))" "UNIX_API=__attribute__((visibility(\"default\")))" "MIME_API=__attribute__((visibility(\"default\")))")
+    set(socket.headers_SOURCES src/headers.lua)
+    set(ltn12_SOURCES src/ltn12.lua)
+    set(socket.smtp_SOURCES src/smtp.lua)
+    set(socket.serial_DEFINES "LUA_COMPAT_APIINTCASTS" "LUASOCKET_DEBUG" "UNIX_HAS_SUN_LEN" "LUASOCKET_API=__attribute__((visibility(\"default\")))" "UNIX_API=__attribute__((visibility(\"default\")))" "MIME_API=__attribute__((visibility(\"default\")))")
+    set(socket.ftp_SOURCES src/ftp.lua)
+    set(socket.http_SOURCES src/http.lua)
+    set(socket.unix_SOURCES "src/buffer.c" "src/auxiliar.c" "src/options.c" "src/timeout.c" "src/io.c" "src/usocket.c" "src/unix.c")
+    set(socket.serial_SOURCES "src/buffer.c" "src/auxiliar.c" "src/options.c" "src/timeout.c" "src/io.c" "src/usocket.c" "src/serial.c")
+    set(socket.url_SOURCES src/url.lua)
+    set(mime.core_SOURCES "src/mime.c")
+endif()
+
+if (WIN32)
+    set(socket_SOURCES src/socket.lua)
+    set(socket.headers_SOURCES src/headers.lua)
+    set(ltn12_SOURCES src/ltn12.lua)
+    set(socket.tp_SOURCES src/tp.lua)
+    set(socket.ftp_SOURCES src/ftp.lua)
+    set(socket.http_SOURCES src/http.lua)
+    set(socket.core_SOURCES "src/luasocket.c" "src/timeout.c" "src/buffer.c" "src/io.c" "src/auxiliar.c" "src/options.c" "src/inet.c" "src/except.c" "src/select.c" "src/tcp.c" "src/udp.c" "src/wsocket.c")
+    set(mime.core_SOURCES "src/mime.c")
+    set(mime.core_DEFINES "LUA_COMPAT_APIINTCASTS" "LUASOCKET_DEBUG" "LUASOCKET_INET_PTON" "WINVER=0x0501" "LUASOCKET_API=__declspec(dllexport)" "MIME_API=__declspec(dllexport)")
+    set(mime_SOURCES src/mime.lua)
+    set(socket.url_SOURCES src/url.lua)
+    set(socket.core_LIB_NAMES "ws2_32")
+    set(socket.smtp_SOURCES src/smtp.lua)
+    set(socket.core_DEFINES "LUA_COMPAT_APIINTCASTS" "LUASOCKET_DEBUG" "LUASOCKET_INET_PTON" "WINVER=0x0501" "LUASOCKET_API=__declspec(dllexport)" "MIME_API=__declspec(dllexport)")
+endif()
+
+if (UNIX)
+    set(socket_SOURCES src/socket.lua)
+    set(socket.tp_SOURCES src/tp.lua)
+    set(socket.core_SOURCES "src/luasocket.c" "src/timeout.c" "src/buffer.c" "src/io.c" "src/auxiliar.c" "src/options.c" "src/inet.c" "src/except.c" "src/select.c" "src/tcp.c" "src/udp.c" "src/usocket.c")
+    set(mime.core_DEFINES "LUA_COMPAT_APIINTCASTS" "LUASOCKET_DEBUG" "LUASOCKET_API=__attribute__((visibility(\"default\")))" "UNIX_API=__attribute__((visibility(\"default\")))" "MIME_API=__attribute__((visibility(\"default\")))")
+    set(mime_SOURCES src/mime.lua)
+    set(socket.unix_DEFINES "LUA_COMPAT_APIINTCASTS" "LUASOCKET_DEBUG" "LUASOCKET_API=__attribute__((visibility(\"default\")))" "UNIX_API=__attribute__((visibility(\"default\")))" "MIME_API=__attribute__((visibility(\"default\")))")
+    set(socket.core_DEFINES "LUA_COMPAT_APIINTCASTS" "LUASOCKET_DEBUG" "LUASOCKET_API=__attribute__((visibility(\"default\")))" "UNIX_API=__attribute__((visibility(\"default\")))" "MIME_API=__attribute__((visibility(\"default\")))")
+    set(socket.headers_SOURCES src/headers.lua)
+    set(ltn12_SOURCES src/ltn12.lua)
+    set(socket.smtp_SOURCES src/smtp.lua)
+    set(socket.serial_DEFINES "LUA_COMPAT_APIINTCASTS" "LUASOCKET_DEBUG" "LUASOCKET_API=__attribute__((visibility(\"default\")))" "UNIX_API=__attribute__((visibility(\"default\")))" "MIME_API=__attribute__((visibility(\"default\")))")
+    set(socket.ftp_SOURCES src/ftp.lua)
+    set(socket.http_SOURCES src/http.lua)
+    set(socket.unix_SOURCES "src/buffer.c" "src/auxiliar.c" "src/options.c" "src/timeout.c" "src/io.c" "src/usocket.c" "src/unix.c")
+    set(socket.serial_SOURCES "src/buffer.c" "src/auxiliar.c" "src/options.c" "src/timeout.c" "src/io.c" "src/usocket.c" "src/serial.c")
+    set(socket.url_SOURCES src/url.lua)
+    set(mime.core_SOURCES "src/mime.c")
+endif()
+
+install(DIRECTORY ${BUILD_COPY_DIRECTORIES} DESTINATION ${INSTALL_SHARE}/LuaSocket)
+
+function(build_install KEYS DIR)
+    list(REMOVE_DUPLICATES KEYS)
+
+    foreach(KEY ${${KEYS}})
+        set(BASE_NAME ${KEYS}_${KEY})
+        install(FILES ${${BASE_NAME}_SRC} DESTINATION ${DIR}/${${BASE_NAME}_DST} RENAME ${${BASE_NAME}_RENAME})
+    endforeach(KEY)
+endfunction(build_install)
+
+build_install(BUILD_INSTALL_lua ${INSTALL_LMOD})
+build_install(BUILD_INSTALL_lib ${INSTALL_LIB})
+build_install(BUILD_INSTALL_conf ${INSTALL_ETC})
+build_install(BUILD_INSTALL_bin ${INSTALL_BIN})
+
+
+if (WIN32)
+    install(FILES ${mime_SOURCES} DESTINATION ${INSTALL_LMOD}/ RENAME mime.lua)
+    install(FILES ${socket.ftp_SOURCES} DESTINATION ${INSTALL_LMOD}/socket RENAME ftp.lua)
+    install(FILES ${ltn12_SOURCES} DESTINATION ${INSTALL_LMOD}/ RENAME ltn12.lua)
+    install(FILES ${socket.headers_SOURCES} DESTINATION ${INSTALL_LMOD}/socket RENAME headers.lua)
+    install(FILES ${socket.tp_SOURCES} DESTINATION ${INSTALL_LMOD}/socket RENAME tp.lua)
+    install(FILES ${socket.http_SOURCES} DESTINATION ${INSTALL_LMOD}/socket RENAME http.lua)
+    install(FILES ${socket.smtp_SOURCES} DESTINATION ${INSTALL_LMOD}/socket RENAME smtp.lua)
+    install(FILES ${socket.url_SOURCES} DESTINATION ${INSTALL_LMOD}/socket RENAME url.lua)
+    install(FILES ${socket_SOURCES} DESTINATION ${INSTALL_LMOD}/ RENAME socket.lua)
+endif()
+
+if (APPLE)
+    install(FILES ${mime_SOURCES} DESTINATION ${INSTALL_LMOD}/ RENAME mime.lua)
+    install(FILES ${socket.ftp_SOURCES} DESTINATION ${INSTALL_LMOD}/socket RENAME ftp.lua)
+    install(FILES ${ltn12_SOURCES} DESTINATION ${INSTALL_LMOD}/ RENAME ltn12.lua)
+    install(FILES ${socket.headers_SOURCES} DESTINATION ${INSTALL_LMOD}/socket RENAME headers.lua)
+    install(FILES ${socket.tp_SOURCES} DESTINATION ${INSTALL_LMOD}/socket RENAME tp.lua)
+    install(FILES ${socket.http_SOURCES} DESTINATION ${INSTALL_LMOD}/socket RENAME http.lua)
+    install(FILES ${socket.smtp_SOURCES} DESTINATION ${INSTALL_LMOD}/socket RENAME smtp.lua)
+    install(FILES ${socket.url_SOURCES} DESTINATION ${INSTALL_LMOD}/socket RENAME url.lua)
+    install(FILES ${socket_SOURCES} DESTINATION ${INSTALL_LMOD}/ RENAME socket.lua)
+endif()
+
+if (WIN32)
+    install(FILES ${mime_SOURCES} DESTINATION ${INSTALL_LMOD}/ RENAME mime.lua)
+    install(FILES ${socket.ftp_SOURCES} DESTINATION ${INSTALL_LMOD}/socket RENAME ftp.lua)
+    install(FILES ${ltn12_SOURCES} DESTINATION ${INSTALL_LMOD}/ RENAME ltn12.lua)
+    install(FILES ${socket.headers_SOURCES} DESTINATION ${INSTALL_LMOD}/socket RENAME headers.lua)
+    install(FILES ${socket.tp_SOURCES} DESTINATION ${INSTALL_LMOD}/socket RENAME tp.lua)
+    install(FILES ${socket.http_SOURCES} DESTINATION ${INSTALL_LMOD}/socket RENAME http.lua)
+    install(FILES ${socket.smtp_SOURCES} DESTINATION ${INSTALL_LMOD}/socket RENAME smtp.lua)
+    install(FILES ${socket.url_SOURCES} DESTINATION ${INSTALL_LMOD}/socket RENAME url.lua)
+    install(FILES ${socket_SOURCES} DESTINATION ${INSTALL_LMOD}/ RENAME socket.lua)
+endif()
+
+if (UNIX)
+    install(FILES ${mime_SOURCES} DESTINATION ${INSTALL_LMOD}/ RENAME mime.lua)
+    install(FILES ${socket.ftp_SOURCES} DESTINATION ${INSTALL_LMOD}/socket RENAME ftp.lua)
+    install(FILES ${ltn12_SOURCES} DESTINATION ${INSTALL_LMOD}/ RENAME ltn12.lua)
+    install(FILES ${socket.headers_SOURCES} DESTINATION ${INSTALL_LMOD}/socket RENAME headers.lua)
+    install(FILES ${socket.tp_SOURCES} DESTINATION ${INSTALL_LMOD}/socket RENAME tp.lua)
+    install(FILES ${socket.http_SOURCES} DESTINATION ${INSTALL_LMOD}/socket RENAME http.lua)
+    install(FILES ${socket.smtp_SOURCES} DESTINATION ${INSTALL_LMOD}/socket RENAME smtp.lua)
+    install(FILES ${socket.url_SOURCES} DESTINATION ${INSTALL_LMOD}/socket RENAME url.lua)
+    install(FILES ${socket_SOURCES} DESTINATION ${INSTALL_LMOD}/ RENAME socket.lua)
+endif()
+
+if (WIN32)
+    add_library(mime.core SHARED ${mime.core_SOURCES})
+    
+    foreach(LIBRARY ${mime.core_LIB_NAMES})
+        find_library(mime.core_${LIBRARY} ${LIBRARY} ${mime.core_LIBDIRS})
+        list(APPEND mime.core_LIBRARIES ${LIBRARY})
+    endforeach(LIBRARY)
+    
+    target_include_directories(mime.core PRIVATE ${mime.core_INCDIRS} ${LUA_INCLUDE_DIRS} ${LUA_INCLUDE_DIR})
+    target_compile_definitions(mime.core PRIVATE ${mime.core_DEFINES})
+    target_link_libraries(mime.core PRIVATE ${mime.core_LIBRARIES} ${LUA_LIBRARIES})
+    # Do not prefix "lib" before target name
+    set_target_properties(mime.core PROPERTIES PREFIX "")
+    set_target_properties(mime.core PROPERTIES OUTPUT_NAME core)
+    install(TARGETS mime.core DESTINATION ${INSTALL_CMOD}/mime)
+    add_library(socket.core SHARED ${socket.core_SOURCES})
+    
+    foreach(LIBRARY ${socket.core_LIB_NAMES})
+        find_library(socket.core_${LIBRARY} ${LIBRARY} ${socket.core_LIBDIRS})
+        list(APPEND socket.core_LIBRARIES ${LIBRARY})
+    endforeach(LIBRARY)
+    
+    target_include_directories(socket.core PRIVATE ${socket.core_INCDIRS} ${LUA_INCLUDE_DIRS} ${LUA_INCLUDE_DIR})
+    target_compile_definitions(socket.core PRIVATE ${socket.core_DEFINES})
+    target_link_libraries(socket.core PRIVATE ${socket.core_LIBRARIES} ${LUA_LIBRARIES})
+    # Do not prefix "lib" before target name
+    set_target_properties(socket.core PROPERTIES PREFIX "")
+    set_target_properties(socket.core PROPERTIES OUTPUT_NAME core)
+    install(TARGETS socket.core DESTINATION ${INSTALL_CMOD}/socket)
+endif()
+
+if (APPLE)
+    add_library(socket.serial SHARED ${socket.serial_SOURCES})
+    
+    foreach(LIBRARY ${socket.serial_LIB_NAMES})
+        find_library(socket.serial_${LIBRARY} ${LIBRARY} ${socket.serial_LIBDIRS})
+        list(APPEND socket.serial_LIBRARIES ${LIBRARY})
+    endforeach(LIBRARY)
+    
+    target_include_directories(socket.serial PRIVATE ${socket.serial_INCDIRS} ${LUA_INCLUDE_DIRS} ${LUA_INCLUDE_DIR})
+    target_compile_definitions(socket.serial PRIVATE ${socket.serial_DEFINES})
+    target_link_libraries(socket.serial PRIVATE ${socket.serial_LIBRARIES} ${LUA_LIBRARIES})
+    # Do not prefix "lib" before target name
+    set_target_properties(socket.serial PROPERTIES PREFIX "")
+    set_target_properties(socket.serial PROPERTIES OUTPUT_NAME serial)
+    install(TARGETS socket.serial DESTINATION ${INSTALL_CMOD}/socket)
+    add_library(socket.core SHARED ${socket.core_SOURCES})
+    
+    foreach(LIBRARY ${socket.core_LIB_NAMES})
+        find_library(socket.core_${LIBRARY} ${LIBRARY} ${socket.core_LIBDIRS})
+        list(APPEND socket.core_LIBRARIES ${LIBRARY})
+    endforeach(LIBRARY)
+    
+    target_include_directories(socket.core PRIVATE ${socket.core_INCDIRS} ${LUA_INCLUDE_DIRS} ${LUA_INCLUDE_DIR})
+    target_compile_definitions(socket.core PRIVATE ${socket.core_DEFINES})
+    target_link_libraries(socket.core PRIVATE ${socket.core_LIBRARIES} ${LUA_LIBRARIES})
+    # Do not prefix "lib" before target name
+    set_target_properties(socket.core PROPERTIES PREFIX "")
+    set_target_properties(socket.core PROPERTIES OUTPUT_NAME core)
+    install(TARGETS socket.core DESTINATION ${INSTALL_CMOD}/socket)
+    add_library(mime.core SHARED ${mime.core_SOURCES})
+    
+    foreach(LIBRARY ${mime.core_LIB_NAMES})
+        find_library(mime.core_${LIBRARY} ${LIBRARY} ${mime.core_LIBDIRS})
+        list(APPEND mime.core_LIBRARIES ${LIBRARY})
+    endforeach(LIBRARY)
+    
+    target_include_directories(mime.core PRIVATE ${mime.core_INCDIRS} ${LUA_INCLUDE_DIRS} ${LUA_INCLUDE_DIR})
+    target_compile_definitions(mime.core PRIVATE ${mime.core_DEFINES})
+    target_link_libraries(mime.core PRIVATE ${mime.core_LIBRARIES} ${LUA_LIBRARIES})
+    # Do not prefix "lib" before target name
+    set_target_properties(mime.core PROPERTIES PREFIX "")
+    set_target_properties(mime.core PROPERTIES OUTPUT_NAME core)
+    install(TARGETS mime.core DESTINATION ${INSTALL_CMOD}/mime)
+    add_library(socket.unix SHARED ${socket.unix_SOURCES})
+    
+    foreach(LIBRARY ${socket.unix_LIB_NAMES})
+        find_library(socket.unix_${LIBRARY} ${LIBRARY} ${socket.unix_LIBDIRS})
+        list(APPEND socket.unix_LIBRARIES ${LIBRARY})
+    endforeach(LIBRARY)
+    
+    target_include_directories(socket.unix PRIVATE ${socket.unix_INCDIRS} ${LUA_INCLUDE_DIRS} ${LUA_INCLUDE_DIR})
+    target_compile_definitions(socket.unix PRIVATE ${socket.unix_DEFINES})
+    target_link_libraries(socket.unix PRIVATE ${socket.unix_LIBRARIES} ${LUA_LIBRARIES})
+    # Do not prefix "lib" before target name
+    set_target_properties(socket.unix PROPERTIES PREFIX "")
+    set_target_properties(socket.unix PROPERTIES OUTPUT_NAME unix)
+    install(TARGETS socket.unix DESTINATION ${INSTALL_CMOD}/socket)
+endif()
+
+if (WIN32)
+    add_library(mime.core SHARED ${mime.core_SOURCES})
+    
+    foreach(LIBRARY ${mime.core_LIB_NAMES})
+        find_library(mime.core_${LIBRARY} ${LIBRARY} ${mime.core_LIBDIRS})
+        list(APPEND mime.core_LIBRARIES ${LIBRARY})
+    endforeach(LIBRARY)
+    
+    target_include_directories(mime.core PRIVATE ${mime.core_INCDIRS} ${LUA_INCLUDE_DIRS} ${LUA_INCLUDE_DIR})
+    target_compile_definitions(mime.core PRIVATE ${mime.core_DEFINES})
+    target_link_libraries(mime.core PRIVATE ${mime.core_LIBRARIES} ${LUA_LIBRARIES})
+    # Do not prefix "lib" before target name
+    set_target_properties(mime.core PROPERTIES PREFIX "")
+    set_target_properties(mime.core PROPERTIES OUTPUT_NAME core)
+    install(TARGETS mime.core DESTINATION ${INSTALL_CMOD}/mime)
+    add_library(socket.core SHARED ${socket.core_SOURCES})
+    
+    foreach(LIBRARY ${socket.core_LIB_NAMES})
+        find_library(socket.core_${LIBRARY} ${LIBRARY} ${socket.core_LIBDIRS})
+        list(APPEND socket.core_LIBRARIES ${LIBRARY})
+    endforeach(LIBRARY)
+    
+    target_include_directories(socket.core PRIVATE ${socket.core_INCDIRS} ${LUA_INCLUDE_DIRS} ${LUA_INCLUDE_DIR})
+    target_compile_definitions(socket.core PRIVATE ${socket.core_DEFINES})
+    target_link_libraries(socket.core PRIVATE ${socket.core_LIBRARIES} ${LUA_LIBRARIES})
+    # Do not prefix "lib" before target name
+    set_target_properties(socket.core PROPERTIES PREFIX "")
+    set_target_properties(socket.core PROPERTIES OUTPUT_NAME core)
+    install(TARGETS socket.core DESTINATION ${INSTALL_CMOD}/socket)
+endif()
+
+if (UNIX)
+    add_library(socket.serial SHARED ${socket.serial_SOURCES})
+    
+    foreach(LIBRARY ${socket.serial_LIB_NAMES})
+        find_library(socket.serial_${LIBRARY} ${LIBRARY} ${socket.serial_LIBDIRS})
+        list(APPEND socket.serial_LIBRARIES ${LIBRARY})
+    endforeach(LIBRARY)
+    
+    target_include_directories(socket.serial PRIVATE ${socket.serial_INCDIRS} ${LUA_INCLUDE_DIRS} ${LUA_INCLUDE_DIR})
+    target_compile_definitions(socket.serial PRIVATE ${socket.serial_DEFINES})
+    target_link_libraries(socket.serial PRIVATE ${socket.serial_LIBRARIES} ${LUA_LIBRARIES})
+    # Do not prefix "lib" before target name
+    set_target_properties(socket.serial PROPERTIES PREFIX "")
+    set_target_properties(socket.serial PROPERTIES OUTPUT_NAME serial)
+    install(TARGETS socket.serial DESTINATION ${INSTALL_CMOD}/socket)
+    add_library(socket.core SHARED ${socket.core_SOURCES})
+    
+    foreach(LIBRARY ${socket.core_LIB_NAMES})
+        find_library(socket.core_${LIBRARY} ${LIBRARY} ${socket.core_LIBDIRS})
+        list(APPEND socket.core_LIBRARIES ${LIBRARY})
+    endforeach(LIBRARY)
+    
+    target_include_directories(socket.core PRIVATE ${socket.core_INCDIRS} ${LUA_INCLUDE_DIRS} ${LUA_INCLUDE_DIR})
+    target_compile_definitions(socket.core PRIVATE ${socket.core_DEFINES})
+    target_link_libraries(socket.core PRIVATE ${socket.core_LIBRARIES} ${LUA_LIBRARIES})
+    # Do not prefix "lib" before target name
+    set_target_properties(socket.core PROPERTIES PREFIX "")
+    set_target_properties(socket.core PROPERTIES OUTPUT_NAME core)
+    install(TARGETS socket.core DESTINATION ${INSTALL_CMOD}/socket)
+    add_library(mime.core SHARED ${mime.core_SOURCES})
+    
+    foreach(LIBRARY ${mime.core_LIB_NAMES})
+        find_library(mime.core_${LIBRARY} ${LIBRARY} ${mime.core_LIBDIRS})
+        list(APPEND mime.core_LIBRARIES ${LIBRARY})
+    endforeach(LIBRARY)
+    
+    target_include_directories(mime.core PRIVATE ${mime.core_INCDIRS} ${LUA_INCLUDE_DIRS} ${LUA_INCLUDE_DIR})
+    target_compile_definitions(mime.core PRIVATE ${mime.core_DEFINES})
+    target_link_libraries(mime.core PRIVATE ${mime.core_LIBRARIES} ${LUA_LIBRARIES})
+    # Do not prefix "lib" before target name
+    set_target_properties(mime.core PROPERTIES PREFIX "")
+    set_target_properties(mime.core PROPERTIES OUTPUT_NAME core)
+    install(TARGETS mime.core DESTINATION ${INSTALL_CMOD}/mime)
+    add_library(socket.unix SHARED ${socket.unix_SOURCES})
+    
+    foreach(LIBRARY ${socket.unix_LIB_NAMES})
+        find_library(socket.unix_${LIBRARY} ${LIBRARY} ${socket.unix_LIBDIRS})
+        list(APPEND socket.unix_LIBRARIES ${LIBRARY})
+    endforeach(LIBRARY)
+    
+    target_include_directories(socket.unix PRIVATE ${socket.unix_INCDIRS} ${LUA_INCLUDE_DIRS} ${LUA_INCLUDE_DIR})
+    target_compile_definitions(socket.unix PRIVATE ${socket.unix_DEFINES})
+    target_link_libraries(socket.unix PRIVATE ${socket.unix_LIBRARIES} ${LUA_LIBRARIES})
+    # Do not prefix "lib" before target name
+    set_target_properties(socket.unix PROPERTIES PREFIX "")
+    set_target_properties(socket.unix PROPERTIES OUTPUT_NAME unix)
+    install(TARGETS socket.unix DESTINATION ${INSTALL_CMOD}/socket)
+endif()
+
+
